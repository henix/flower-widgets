<!doctype html>
<html>
<head>
<meta charset="utf-8" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>User Login Demo</title>
</head>
<body>

<div data-name="page" data-class="Page">

<div>
<form data-name="loginForm">
<p><label for="username">username: </label><input type="text" name="username" /></p>
<p><label for="password">password: </label><input type="password" name="password" /></p>
<p><input type="submit" value="submit" /></p>
</form>
</div>

<div data-name="main" data-class="FlowerUI.Renderer">
<p>Hello, {{username}}!</p>
</div>

</div>

<script type="text/javascript">
/**
 * like IllegalArgumentException
 * Indicates some user input is bad
 */
function ArgumentError(message) {
	this.name = 'ArgumentError';
	this.message = message;
}
ArgumentError.prototype = new Error();
ArgumentError.prototype.constructor = ArgumentError;

var Precond = {
	fail: function(msg) {
		throw new ArgumentError(msg);
	},
	check: function(cond, msg) {
		if (!cond) {
			this.fail(msg);
		}
	}
};
;
</script>
<script type="text/javascript">
var Flower = {};
;
Flower.eventer = {};
;
if (document.body.addEventListener) {
	Flower.eventer.addEventListener = function(target, eventType, handler) {
		target.addEventListener(eventType, handler, false);
	};
	Flower.eventer.removeEventListener = function(target, eventType, handler) {
		target.removeEventListener(eventType, handler);
	};
} else {
	Flower.eventer.addEventListener = function(target, eventType, handler) {
		target.attachEvent('on' + eventType, handler);
	};
	Flower.eventer.removeEventListener = function(target, eventType, handler) {
		target.detachEvent('on' + eventType, handler);
	};
}
;
</script>
<script type="text/javascript">
Flower.eventer.preventDefault = function(e) {
	if (typeof e.preventDefault === 'function') {
		e.preventDefault();
		e.stopPropagation();
	} else {
		e.returnValue = false;
		e.cancelBubble = true;
	}
};
;
</script>
<script type="text/javascript">
function AssertError(msg) {
	this.message = msg;
}
AssertError.prototype = new Error();
AssertError.prototype.constructor = AssertError;
AssertError.prototype.name = 'AssertError';

var Assert = {
	fail: function(msg) {
		throw new AssertError(msg);
	}
};
;
Assert.present = function(obj, msg) {
	if ((typeof obj === 'undefined') || (obj === null)) {
		msg = msg ? ': ' + msg : '';
		Assert.fail('object null or undefined' + msg);
	}
};
;
Assert.isTrue = function(cond, msg) {
	if (cond !== true) {
		msg = msg ? ': ' + msg : '';
		Assert.fail('condition ' + cond + ' is not true' + msg);
	}
};
;
/**
 * refer:
 * http://www.quirksmode.org/js/cookies.html
 * http://www.w3schools.com/js/js_cookies.asp
 */

(function () {

Flower.cookie = {
	dict: null,

	/**
	 * load cookie to this object
	 */
	load: function() {
		this.dict = {};
		var ar = document.cookie.split(';');
		var len = ar.length;
		for (var i = 0; i < len; i++) {
			var eqidx = ar[i].indexOf('=');
			var name = ar[i].substring(0, eqidx).replace(/^[ ]+/, '');
			var value = decodeURIComponent(ar[i].substring(eqidx + 1));
			this.dict[name] = value;
		}
	},

	/**
	 * @param name must not have '=' or ';'
	 */
	set: function(name, value, ms, path) {
		Assert.present(name);
		Assert.isTrue(name.indexOf('=') === -1, 'name must not contains "="');
		Assert.isTrue(name.indexOf(';') === -1, 'name must not contains ";"');

		function myescape(str) {
			return str.replace(/%/g, '%25').replace(/;/g, '%3B');
		}
		var expires;
		if (ms) {
			var date = new Date();
			date.setTime(date.getTime() + ms);
			expires = "; expires=" + date.toGMTString();
		} else {
			expires = "";
		}
		path = path || '/';
		value = value || '';
		document.cookie = name + "=" + myescape(value) + expires + "; path=" + path;
		this.dict[name] = value;
	},

	remove: function(name) {
		this.set(name, null, -1);
		delete this.dict[name];
	},

	get: function(name) {
		return this.dict[name];
	}
};

})();
;
</script>
<script type="text/javascript">
(function() {

var TimeUnit = {};
TimeUnit.MILLISECONDS = 1;
TimeUnit.SECONDS = 1000 * TimeUnit.MILLISECONDS;
TimeUnit.MINUTES = 60 * TimeUnit.SECONDS;
TimeUnit.HOURS = 60 * TimeUnit.MINUTES;
TimeUnit.DAYS = 24 * TimeUnit.HOURS;

Flower.TimeUnit = TimeUnit;

})();
;
</script>
<script type="text/javascript" src="../dist/flowerui.js"></script>
<script type="text/javascript" src="https://raw.github.com/janl/mustache.js/master/mustache.js"></script>

<script type="text/javascript">
var Flow = {};
Flow.exec = function(dfa, start) {
	var cur = start || 'start';
	while (cur) {
		cur = dfa[cur]();
	}
};
</script>

<script type="text/javascript">
Flower.cookie.load();

var $login = {
	username: null,
};

var $flow = null;

function Page(elem) {
	this.loginForm = null;
	this.main = null;
	this.cards = new FlowerUI.Cards(elem);
}
Page.prototype.init = function() {
	this.main.render_func = Mustache.render;
	var this1 = this;
	Flower.eventer.addEventListener(this.loginForm, 'submit', function(e) {
		e = e || window.event;
		try {
			Precond.check(this1.loginForm.username.value, 'username is empty');
			Precond.check(this1.loginForm.password.value, 'password is empty');
			Flower.cookie.set('username', this1.loginForm.username.value, 10 * Flower.TimeUnit.MINUTES);
			Flow.exec($flow);
		} catch(e) {
			if (e instanceof ArgumentError) {
				alert(e.message);
			} else throw e;
		} finally {
			Flower.eventer.preventDefault(e);
		}
	});
	this.cards.afterFirstSwitch(1, function(elem) {
		this1.main.repaint($login);
	});
	this.cards.init();
};

var $ = FlowerUI.compileAll();

function checkLogin() {
	var tmp = Flower.cookie.get('username');
	if (tmp) {
		$login.username = tmp;
		return true;
	}
	return false;
}

$flow = {
	checkLogin: function() {
		if (checkLogin()) {
			return 'main';
		}
		return 'showLoginForm';
	},
	showLoginForm: function() {
		$.page.cards.switchTo(0);
	},
	main: function() {
		$.page.cards.switchTo(1);
	}
};
$flow.start = $flow.checkLogin;

Flow.exec($flow);
</script>

</body>
</html>
